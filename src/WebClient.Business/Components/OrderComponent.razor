@using FoodOnline.Domain.Enums

<div class="list-group-item container-fluid alert @BgCss ">
    <div class="row h-80">
        <div class="col-12">
            <h5 class="mb-1">@Order.TotalPriceEur&euro; <small>@Order.Address</small></h5>
        </div>
    </div>
    <div class="row h-20">
        <div class="col-4 justify-content-center align-items-center">
            <div class="row justify-content-center align-items-center">
                @if (Button != ButtonType.Right)
                {
                    <button class="btn btn-primary" @onclick="LeftClicked">&lt;</button>
                }
            </div>
        </div>
        <div class="col-4 justify-content-center align-items-center">
            <div class="row justify-content-center align-items-center">
                <button class="btn btn-primary" @onclick="() => ViewClicked.InvokeAsync(Order)">VIEW</button>
            </div>
        </div>
        <div class="col-4">
            <div class="row justify-content-center align-items-center">
                @if (Button != ButtonType.Left)
                {
                    <button class="btn btn-primary" @onclick="RightClicked">&gt;</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Order Order { get; set; }

    [Parameter]
    public ButtonType Button { get; set; }

    [Parameter]
    public EventCallback LeftClicked { get; set; }

    [Parameter]
    public EventCallback RightClicked { get; set; }

    [Parameter]
    public EventCallback<Order> ViewClicked { get; set; }

    private string BgCss { get; set; }

    protected override void OnInitialized()
    {
        BgCss = Order.State switch
        {
            OrderState.Confirmed => "alert-danger",
            OrderState.Delivering => "alert-warning",
            OrderState.Delivered => "alert-success",
            _ => "alert-primary"
        };
    }

    public enum ButtonType
    {
        Both,
        Left,
        Right
    }
}