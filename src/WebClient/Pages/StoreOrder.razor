@page "/order"

@using Microsoft.AspNetCore.SignalR.Client
@using FoodOnline.Domain.Enums
@using FoodOnline.Domain.Orders.Commands
@using FoodOnline.Domain.ValueObjects

@implements IDisposable

@inject ISessionStorageService sessionStorage
@inject NavigationManager navigation

<main class="container">
    <div class="row h-100 justify-content-center align-items-center">
        <div class="card">
            <div class="card-header">Please don't leave the page until the order is confirmed!</div>
            <div class="card-body">
                @if (!Sent)
                {
                    <div>Send Order?</div>
                    <div>Canceling will take you back to the main page!</div>
                }
                else if (OrderState == OrderState.Sending)
                {
                    <h4>Sending your order!</h4>
                    <BSProgress IsStriped="true" IsAnimated="true" Value="100" />
                }
                else if (OrderState == OrderState.Received)
                {
                    <h4>Your order has been received please wait for it to be confirmed!</h4>
                }
                else if (OrderState == OrderState.Confirmed)
                {
                    <h4>Your order is confirmed!</h4>
                }
                else if (OrderState == OrderState.Delivering)
                {
                    <h4>Your order is being delivered!</h4>
                }
                else if (OrderState == OrderState.Delivered)
                {
                    <h4>Your order has been delivered!</h4>
                }
                else if (OrderState == OrderState.Canceled)
                {
                    <h4>We are really sorry but your order has been canceled :/</h4>
                }
            </div>
            <div class="card-footer">
                <button class="btn btn-primary @Disabled" @onclick="SendOrder">Send</button>
                <button class="btn btn-danger @Disabled" @onclick="@(() => navigation.NavigateTo(""))">Cancel</button>
            </div>
        </div>
    </div>
</main>

@code {
    private HubConnection hubConnection;

    private CreateOrder Order { get; set; }

    private bool Sent { get; set; }

    private CssBool Disabled { get; set; }

    private OrderState OrderState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Disabled = new CssBool(() => Sent, "disabled", "");
        Order = await sessionStorage.GetItemAsync<CreateOrder>("order");
        var address = await sessionStorage.GetItemAsync<string>("address");
        Order.Address = Address.For(address);

        if (Order == null)
        {
            navigation.NavigateTo("");
            return;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:4000/api/order")
            .Build();

        hubConnection.On<OrderState>("UpdateOrder", (state) =>
        {
            OrderState = state;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task SendOrder()
    {
        if (Sent) return;

        Sent = true;
        await hubConnection.SendAsync("PlaceOrder", hubConnection.ConnectionId, Order, Order.Address.ToString());
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}