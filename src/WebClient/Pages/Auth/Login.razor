@page "/login"

@using FoodOnline.Domain.Auth.Requests

@inject IAuthService auth

<main class="container h-100 justify-content-center align-items-center">
    <div class="row h-100 justify-content-center align-items-center">
        <div class="form-container">
            @if (Status == 4)
            {
                <LogedIn />
            }
            else if (Status == 2)
            {
                <div class="card text-white bg-success">
                    <div class="card-header">
                        Success!
                    </div>
                    <div class="card-body">
                        <p class="card-text">You are logged in!</p>
                        <a href="/" class="btn btn-primary">Home</a>
                    </div>
                </div>
            }
            else
            {
                <BSForm Model="Model"
                        Context="formContext"
                        OnValidSubmit="ValidSubmit"
                        Class="rounded bg-white p-5">

                    @if (Status == 1)
                    {
                        <BSProgress IsStriped="true" IsAnimated="true" Value="100" />
                    }

                    <BSFormGroup>
                        <BSLabel for="email">Email</BSLabel>
                        <BSInput id="email" InputType="InputType.Email" @bind-Value="Model.Email" />
                    </BSFormGroup>
                    <BSFormGroup>
                        <BSLabel for="pass">Password</BSLabel>
                        <BSInput id="pass" InputType="InputType.Password" ValidateOnChange="true" @bind-Value="Model.Password" />
                    </BSFormGroup>

                    <button class="btn btn-primary" disabled="@running" type="submit">Login</button>
                    @if (Status == 3)
                    {
                        <span class="badge badge-danger">Username or password is wrong!</span>
                    }
                </BSForm>
            }
        </div>
    </div>
</main>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    // Lazy initialization for our model in case the form is never shown.
    private LoginUser _model;

    private LoginUser Model => _model ??= new LoginUser();

    // 0 register, 1 loading, 2 success, 3 failed, 4 Loged in
    private int Status { get; set; }

    private bool running;

    protected override async Task OnInitializedAsync()
    {
        Status = (await AuthState).User.Identity.IsAuthenticated ? 4 : 0;
    }

    private async Task ValidSubmit()
    {
        if (running) return;

        try
        {
            Status = 1;
            var result = await auth.LoginAsync(Model);
            Status = 2;
        }
        catch
        {
            Status = 3;
        }
        finally
        {
            running = false;
        }
    }
}